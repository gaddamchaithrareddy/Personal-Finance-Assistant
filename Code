import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from joblib import dump, load
from datetime import datetime

# Read data from CSV file (replace 'your_data.csv' with your actual file path)
df = pd.read_csv("/content/Daily Household Transactions (1).csv")

# Label encoding for the 'Category' column
le = LabelEncoder()
df['Category_Encoded'] = le.fit_transform(df['Category'])

# Features and target variable
X = df[['Subcategory', 'Amount', 'Date']]
y = df['Category_Encoded']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest Classifier
clf = RandomForestClassifier()
clf.fit(X_train[['Amount']], y_train)  # Adjust features as needed

# Save the trained model
dump(clf, 'category_classifier.joblib')

# Get the classes from the label encoder
classes = le.classes_

# Function to predict category for a new Subcategory
def predict_category(subcategory_description, amount, date):
    loaded_clf = load('category_classifier.joblib')

    # Handle previously unseen labels
    try:
        # Check if the label is present in the classes
        if subcategory_description in classes:
            subcategory_encoded = le.transform([subcategory_description])[0]  # Extract the label
            category_encoded = loaded_clf.predict([[amount]])
            predicted_category = le.inverse_transform(category_encoded)
        else:
            raise ValueError(f"Unseen label: {subcategory_description}")
    except ValueError as e:
        # Handle the case where the label is unseen
        predicted_category = f'Unseen Label: {subcategory_description}'

    return predicted_category[0]

# Expense Tracking
def track_expense(subcategory_description, amount, date):
    category = predict_category(subcategory_description, amount, date)
    df_expense = pd.DataFrame({'Subcategory': [subcategory_description],
                               'Amount': [amount],
                               'Date': [date],
                               'Category': [category]})
    return df_expense

# Bill Reminder
def set_bill_reminder(bill_name, due_date, account_balance, bill_amount_threshold):
    today = datetime.now()
    due_date = datetime.strptime(due_date, '%Y-%m-%d')
    days_until_due = (due_date - today).days

    if days_until_due > 0:
        remaining_days_message = f"{days_until_due} days" if days_until_due > 1 else "tomorrow"
        print(f"Reminder: {bill_name} is due in {remaining_days_message}.")

        # Check if account balance is below the threshold
        if account_balance < bill_amount_threshold:
            print(f"Alert: Low account balance! Current balance is {account_balance}.")
    else:
        print(f"The due date for {bill_name} has passed. Please check your payment status.")
# Financial Goal Tracking
def track_financial_goal(goal_name, target_amount, current_amount):
    progress_percentage = (current_amount / target_amount) * 100
    print(f"Progress for {goal_name}: {progress_percentage:.2f}%")

# Example Usage
new_subcategory = 'Gas Station'
new_amount = 35.0
new_date = '2023-01-06'

df_expense = track_expense(new_subcategory, new_amount, new_date)
print("Expense Tracked:")
print(df_expense)


# Add more bill reminders as needed
# Example Usage
current_account_balance = 3000
bill_threshold = 1000

set_bill_reminder('Rent', '2023-02-01', current_account_balance, bill_threshold)


track_financial_goal('Emergency Fund', 5000, 2500)
